/*
* Copyright (C) 2011 Samsung Electronics Corporation. All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided the following conditions
* are met:
* 
* 1.  Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
* 
* 2.  Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in the
*     documentation and/or other materials provided with the distribution.
* 
* THIS SOFTWARE IS PROVIDED BY SAMSUNG ELECTRONICS CORPORATION AND ITS
* CONTRIBUTORS "AS IS", AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
* BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SAMSUNG
* ELECTRONICS CORPORATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS, OR BUSINESS INTERRUPTION), HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
* NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

module html {
	interface [
		Conditional=WEBCL,
	] WebCLContext {
	[StrictTypeChecking, Custom]  void getContextInfo (in long contextinfo) raises(DOMException) raises(DOMException);		
	
	WebCLEvent createUserEvent() raises(DOMException);		
	WebCLCommandQueue createCommandQueue(in WebCLDeviceIDList devices, 
				in long prop) raises(DOMException);
	WebCLCommandQueue createCommandQueue(in WebCLDeviceID devices, 
				in long prop) raises(DOMException);
	WebCLProgram createProgramWithSource(in DOMString kernelSource) raises(DOMException);
	WebCLProgram createProgramWithBinary(in WebCLDeviceIDList clDevices,
			in DOMString kernelBinary) raises(DOMException);	
	WebCLMem createBuffer(in long flags, in long size, in long host_ptr) raises(DOMException);			
	WebCLSampler createSampler(in boolean normCords, in long addrMode,
			in long fltrMode) raises(DOMException);	
	void releaseCLResource() raises(DOMException);				
	void retainCLResource() raises(DOMException);
	WebCLMem createImage2D(in long flags, 
				in HTMLCanvasElement canvasElement) raises(DOMException);
	WebCLMem createImage2D(in long flags, 
				in HTMLImageElement imageElement) raises(DOMException);
	WebCLMem createImage2D(in long flags, 
				in HTMLVideoElement videoElement) raises(DOMException);
	WebCLMem createImage2D(in long flags, 
				in ImageData data) raises(DOMException);
	WebCLMem createImage2D(in long flags,
				in unsigned long width,
				in unsigned long height,
				in ArrayBuffer data) raises(DOMException);
	WebCLMem createImage3D(in long flags,
				in unsigned long width,
				in unsigned long height,
				in unsigned long depth,
				in ArrayBuffer data) raises(DOMException);
	WebCLMem createFromGLBuffer(in long flags,
				in WebGLBuffer bufobj) raises(DOMException);
	WebCLMem createFromGLTexture2D(in long flags,
				in unsigned long textureTarget,
				in long miplevel,
				in unsigned long texture) raises(DOMException);
	
	
	};
}
